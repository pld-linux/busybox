http://lists.busybox.net/pipermail/busybox/2024-March/090678.html
https://bugs.gentoo.org/926872

Linux v6.8-rc1 removed the definitions related to CBQ making tc fail to
build. Add some #ifdefs to handle this missing support.
--- a/networking/tc.c
+++ b/networking/tc.c
@@ -231,6 +231,13 @@ static int cbq_parse_opt(int argc, char **argv, struct nlmsghdr *n)
 	return 0;
 }
 #endif
+
+#ifndef TCA_CBQ_MAX
+/*
+ * Linux v6.8-rc1~131^2~60^2^2 removed the uapi definitions for CBQ.
+ * See <A HREF="https://git.kernel.org/linus/33241dca48626">https://git.kernel.org/linus/33241dca48626</A>
+ */
+#else
 static int cbq_print_opt(struct rtattr *opt)
 {
 	struct rtattr *tb[TCA_CBQ_MAX+1];
@@ -322,6 +329,7 @@ static int cbq_print_opt(struct rtattr *opt)
  done:
 	return 0;
 }
+#endif
 
 static FAST_FUNC int print_qdisc(
 		const struct sockaddr_nl *who UNUSED_PARAM,
@@ -375,6 +375,7 @@ static FAST_FUNC int print_qdisc(
 	}
 	if (msg->tcm_info != 1)
 		printf("refcnt %d ", msg->tcm_info);
+#ifdef TCA_CBQ_MAX
 	if (tb[TCA_OPTIONS]) {
 		static const char _q_[] ALIGN1 = "pfifo_fast\0""cbq\0";
 		int qqq = index_in_strings(_q_, name);
@@ -387,6 +388,7 @@ static FAST_FUNC int print_qdisc(
 			printf("(options for %s)", name);
 		}
 	}
+#endif
 	bb_putchar('\n');
 	return 0;
 }
@@ -452,9 +452,11 @@ static FAST_FUNC int print_class(
 		int qqq = index_in_strings(_q_, name);
 		if (qqq == 0) { /* pfifo_fast aka prio */
 			/* nothing. */ /*prio_print_opt(tb[TCA_OPTIONS]);*/
+#ifdef TCA_CBQ_MAX
 		} else if (qqq == 1) { /* class based queuing */
 			/* cbq_print_copt() is identical to cbq_print_opt(). */
 			cbq_print_opt(tb[TCA_OPTIONS]);
+#endif
 		} else {
 			/* don't know how to print options for this class */
 			printf("(options for %s)", name);
